class CalcController{
  constructor(){
    this._lastOperator = '';
    this._lastNumber = '';
    this._displayCalcEl = document.querySelector('#output');
    this._operation = [];
    this.initButtonsEvents();
    this.initialize();
  }

  initialize(){
    this.setLastNumberToDisplay();
  }

  get displayCalc(){
    return this._displayCalcEl.innerHTML;
  }

  set displayCalc(value){
    if(value.toString().length > 16){
      this.setError();
      return false;
    } 
    this._displayCalcEl.innerHTML = value;
  }

  initButtonsEvents(){
    let buttons = document.querySelectorAll('.btn');
    buttons.forEach(btn => {
      btn.addEventListener('click', e => {
        let textBtn = btn.id.replace('btn-', '');
        this.execBtn(textBtn);
      })
    })
  }

  execBtn(value){
    switch(value){
      case 'ac':
        this.allClear();
        break;
      case 'ce':
        this.cancelEntry();
        break;
      case 'plus':
        this.addOperation('+');
        break;
      case 'minus':
      this.addOperation('-');
        break;
      case 'multiply':
      this.addOperation('*');
        break;
      case 'divide':
      this.addOperation('/');
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        this.addOperation(parseInt(value));
        break;
      case 'dot':
        this.addDot(value);
        break;
      case 'result':
        this.calc();
        break;
      default:
        this.setError();
        break;
    }
  }

  allClear(){
    this._operation = [];
    this._lastNumber = '';
    this._lastOperator = '';
    this.setLastNumberToDisplay();
  }

  cancelEntry(){
    this._operation.pop();
    this.setLastNumberToDisplay();
  }

  setError(){
    this.displayCalc = 'ERROR'; 
  }

  addDot(){
    let lastOperation = this.getLastOperation();
    if(typeof lastOperation === 'string' && lastOperation.split('').indexOf('.') > - 1) return;
    if(this.isOperator(lastOperation) || !lastOperation){
      this.pushOperation('0.');
    }else{
      this.setLastOperation(lastOperation.toString() + '.');
    }
    this.setLastNumberToDisplay();

  }

  setLastOperation(value){
    this._operation[this._operation.length - 1] = value;
  }

  getLastOperation(){
    return this._operation[this._operation.length - 1];
  }

  isOperator(value){
    return (['+', '-', '/', '*'].indexOf(value) > -1);
  }

  pushOperation(value){
    this._operation.push(value);
    if(this._operation.length > 3){
      this.calc();
    }else{

    }
  }

  getLastItem(isOperator = true){
    let lastItem;
    for(let i = this._operation.length - 1; i >= 0; i--){
      if(this.isOperator(this._operation[i]) == isOperator){
        lastItem = this._operation[i];
        break;
      }
    }
    if(!lastItem){
      lastItem = (isOperator) ? this._lastOperator : this._lastNumber;
    }
    return lastItem;
  }

  setLastNumberToDisplay(){
    let lastNumber = this.getLastItem(false);
    if(!lastNumber) lastNumber = 0;
    this.displayCalc = lastNumber;
  }

  getResult(){
    try{
      return eval(this._operation.join(''));
    }catch(e){
      setTimeout(() => {
        this.setError();  
      }, 1);
    }
  }

  calc(){
    let last = '';
    this._lastOperator = this.getLastItem();
    if(this._operation.length < 3){
      let firtItem = this._operation[0];
      this._operation = [firtItem, this._lastOperator, this._lastNumber];
    }
    if(this._operation.length > 3){
      last = this._operation.pop();
      this._lastNumber = this.getResult();
    }else if(this._operation.length == 3){
      this._lastNumber = this.getLastItem(false);
    }
    let result = this.getResult();
    this._operation = [result];
    if(last) this._operation.push(last);
    this.setLastNumberToDisplay();
  }

  addOperation(value){
    if(isNaN(this.getLastOperation())){
      if(this.isOperator(value)){
        this.setLastOperation(value);
      }else{
        this.pushOperation(value);
        this.setLastNumberToDisplay();
      }
    }else{
      if(this.isOperator(value)){
        this.pushOperation(value);
      }else{
        let newValue = this.getLastOperation().toString () + value.toString();
        this.setLastOperation(newValue);
        this.setLastNumberToDisplay();
      }
    }
  }
}

let calculator = new CalcController();